@{
    ViewData["Title"] = "Home Page";
}

<div class="text">
<div class="h-full preview-width md:w-auto border border-gray-500 rounded-md p-6 preview bg-white full-screen 
      overflow-x-scroll md:overflow-x-auto overflow-y-scroll"><h1>CashFlow</h1><p>CashFlow é uma WEB API responsável por registrar um fluxo de caixa para comerciantes ou até mesmo para uso pessoal, foi desenvolvido com .NET Core 6.</p><h2>Autores</h2><ul><li><a href="https://www.github.com/EduSpada" target="_blank">EduSpada</a></li></ul><h2>Implantação no <a href="https://portal.azure.com/" target="_blank">Azure</a> em Produção como Demonstração</h2><ul><li><a href="https://cashflowmjv.azurewebsites.net/" target="_blank">CashFlow no Azure</a></li></ul><h2>Instalação Local</h2><h3>Pré-requisitos</h3><p>Será necessário ter instalado:</p><h4>SDK do ASP.NET Core Runtime 6.0.14 para sua distribuição específica</h4><ul><li><a href="https://learn.microsoft.com/dotnet/core/install/linux?WT.mc_id=dotnet-35129-website" target="_blank">Linux</a></li><li><a href="https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-6.0.406-macos-x64-installer" target="_blank">macOS</a></li><li><a href="https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-6.0.406-windows-x64-installer" target="_blank">Windows</a></li></ul><h4>Entity Framework Core tools para o CLI</h4><p>Após a instalação do SDK do ASP.NET Core execute o seguinte comando.</p><pre><code class="language-bash">  dotnet tool install --global dotnet-ef</code></pre><h2>Deploy</h2><h3>Conectando com o banco de dados</h3><p>Para fazer o deploy desse projeto será necessário configurar um banco de dados Mysql limpo no arquivo appsettings.json que está no projeto CashFlowMvc.WebUI.</p><p>Para a configuração do banco de dados é necessário configurar na variável "MysqlConnectionString" uma ConnectionString, seu arquivo deve ficar parecido com o json abaixo:</p><pre><code class="language-json">
{
  "ConnectionStrings": {
    "DefaultConnectionString": "Data Source=CashFlow.db",
    "MysqlConnectionString": "Server=NameIPServer;Port=3306;Database=cashflowmydb;User ID=CashFlowSysAdm; Password=SuaSenha"
},
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}</code></pre><h3>Build</h3><p>Utilize o comando abaixo no diretório raiz para buildar e instalar as dependências da solução.</p><pre><code class="language-bash">  dotnet build</code></pre><h3>Realizando a Migration</h3><p>Com o Entity Framework Core tools instalado execute no diretório da solução o comando:</p><pre><code class="language-bash">  dotnet ef  migrations remove --project CashFlowMvc.Infra.Data -s CashFlowMvc.WebUI -c ApplicationDbContext --verbose</code></pre><p>Esse comando limpará as migrations anteriores para evitar erros no update, caso acontecer algum erro pode fazer manualmente escluindo a pasta Migrations do projeto CashFlowMvc.Infra.Data.</p><p>Em seguida adicione uma nova migration com o comando:</p><pre><code class="language-bash">  dotnet ef  migrations add initial --project CashFlowMvc.Infra.Data -s CashFlowMvc.WebUI -c ApplicationDbContext --verbose</code></pre><p>Esse comando cria os arquivos de migrations.</p><p>E por fim, se tudo ocorreu bem, execute o comando de update a seguir:</p><pre><code class="language-bash">  dotnet ef database update --project CashFlowMvc.Infra.Data -s CashFlowMvc.WebUI -c ApplicationDbContext --verbose</code></pre><p>Esse comando consistirá as tabelas e os dados preexistentes no banco de dados.</p><h2>Executando o projeto</h2><p>Execute o comando abaixo na pasta raiz do projeto.</p><pre><code class="language-bash">  dotnet run --project .\CashFlowMvc.WebUI\CashFlowMvc.WebUI.csproj</code></pre><p>Assim que concluir a execução o projeto estará executando no link abaixo:</p><ul><li><a href="https://localhost:7263/" target="_blank">Cash Flow Localhost</a></li></ul><h2>Funcionalidades</h2><ul><li>Métodos de Pagamento</li></ul><p>É posível criar, editar e excluir métodos de pagamento, e funcionam como a categoria da operação, eles tem o atributo de direção que ajuda a entender se a operação foi de entrada ou saída do fluxo de caixa.</p><ul><li>Operaçóes</li></ul><p>É posível criar, editar e excluir operações classificando-as conforme a ocorrência, elas serão exibidas em verde para entradas e vermelho para saídas.</p><ul><li>Usuários</li></ul><p>É possivel criar novos usuários.</p><h2>Usuários Padrão para Teste local</h2><p>Na primeira execução, é excutado um seed que inclui alguns usuários de teste com diferentes niveis de segurança, são eles:</p><ul><li>usuario@localhost</li></ul><p>Possui permissão de visualizar todas as páginas, mas não pode criar, deletar ou editar os registros.</p><ul><li>employer@localhost</li></ul><p>Possui permissão de visualizar todas as páginas, criar métodos de pagamento e operações, mas não pode editar ou deletar os registros nem criar usuários.</p><ul><li>manager@localhost</li></ul><p>Possui permissão de visualizar todas as páginas, criar, editar e deletar métodos de pagamento e operações, mas não pode criar usuários.</p><ul><li>admin@localhost</li></ul><p>Não possui permissão de visualizar todas as páginas, criar, editar e deletar métodos de pagamento e operações, mas pode exclusivamente novos criar usuários.</p><p>Por padrão a senha é UmASenh@F04t3 exemplificando o padrão que deve ser adotado para novos usuários.
Obs.: Para implementar em produção as senhas devem ser alteradas. É necessário apenas um usuário Admin para dar início ao projeto.</p></div>
</div>
